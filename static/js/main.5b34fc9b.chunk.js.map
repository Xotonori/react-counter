{"version":3,"sources":["components/ParamsCounter/ParamsCounter.module.scss","components/ParamsCounter/Counter/Counter.module.scss","components/ParamsCounter/Params/Params.module.scss","components/ParamsCounter/Button/Button.module.scss","components/ParamsCounter/Params/InputParam/InputParam.module.scss","serviceWorker.js","components/ParamsCounter/Button/Button.jsx","components/ParamsCounter/Counter/Counter.jsx","components/ParamsCounter/Params/InputParam/InputParam.jsx","components/ParamsCounter/Params/Params.jsx","components/ParamsCounter/ParamsCounter.jsx","App.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Button","onClick","this","props","onChangeValue","className","classes","active","style","backgroundColor","disabled","name","React","Component","Counter","setStartValue","setMaxValue","counter","wrongParams","isDifferentParams","propsClassName","screen","max","fontSize","incCounter","resetCounter","InputParam","changeInputValue","e","currentTarget","value","id","wrapInputParam","htmlFor","labelValue","type","inputValue","onChange","error","Params","startValue","maxValue","wrapButton","setValues","ParamsCounter","wrapContainer","state","App","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","setState","inputName","isWrongParams","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5b34fc9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ParamsCounter\":\"ParamsCounter_ParamsCounter__V31qo\",\"wrapContainer\":\"ParamsCounter_wrapContainer__1xRhD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Counter\":\"Counter_Counter__okz1c\",\"screen\":\"Counter_screen__2_SPU\",\"max\":\"Counter_max__2FNy9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Params\":\"Params_Params__1lHau\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__TGJCM\",\"darkBlue\":\"Button_darkBlue__2D4PZ\",\"darkRed\":\"Button_darkRed__whnXt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapInputParam\":\"InputParam_wrapInputParam__1KG_C\",\"error\":\"InputParam_error__1EbBo\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. ParamsCounter is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport classes from './Button.module.scss';\r\n\r\nclass Button extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                onClick={this.props.onChangeValue}\r\n                className={`${classes.Button} ${classes[this.props.active]}`}\r\n                style={{backgroundColor: this.props.backgroundColor}}\r\n                disabled={this.props.disabled}\r\n            >\r\n                {this.props.name}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;\r\n\r\n","import React from 'react';\r\nimport classes from './Counter.module.scss';\r\nimport Button from \"../Button/Button\";\r\n\r\nclass Counter extends React.Component {\r\n\r\n    render() {\r\n\r\n        let setStartValue = this.props.setStartValue;\r\n        let setMaxValue = this.props.setMaxValue;\r\n        let counter = this.props.counter;\r\n        let wrongParams = this.props.wrongParams;\r\n        let isDifferentParams = this.props.isDifferentParams();\r\n\r\n        return (\r\n            <div className={`${this.props.propsClassName} ${classes.Counter}`}>\r\n                <div\r\n                    className={`\r\n                    ${classes.screen}\r\n                    ${counter >= setMaxValue && !isDifferentParams || wrongParams ? classes.max : ''}`}\r\n                    style={{fontSize: isDifferentParams ? '16px' : ''}}\r\n                >\r\n                    {\r\n                        wrongParams\r\n                            ?\r\n                            'incorrect value!'\r\n                            :\r\n                            isDifferentParams ? `enter values and press \\'set\\'` : counter   // Перенос строки! и проблема с wrongParams\r\n\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        disabled={counter === setMaxValue || isDifferentParams}\r\n                        onChangeValue={this.props.incCounter}\r\n                        name={'inc'}\r\n                        backgroundColor={'#6fb3ff'}\r\n                        active={'darkBlue'}\r\n                    />\r\n                    <Button\r\n                        disabled={counter === setStartValue || isDifferentParams}\r\n                        onChangeValue={this.props.resetCounter}\r\n                        name={'reset'}\r\n                        backgroundColor={'#ff5c48'}\r\n                        active={'darkRed'}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport classes from './InputParam.module.scss';\r\n\r\nclass InputParam extends React.Component {\r\n\r\n    changeInputValue = (e) => {\r\n        this.props.changeInputValue(+e.currentTarget.value, e.currentTarget.id)\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.wrapInputParam}>\r\n                <label htmlFor={this.props.id}>\r\n                    {this.props.labelValue}\r\n                </label>\r\n                <input\r\n                    type={'number'}\r\n                    value={this.props.inputValue}\r\n                    id={this.props.id}\r\n                    onChange={this.changeInputValue}\r\n                    className={\r\n                        this.props.inputValue < 0 || this.props.wrongParams ?\r\n                        classes.error : ''\r\n                    }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputParam;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport classes from './Params.module.scss';\r\nimport Button from \"../Button/Button\";\r\nimport InputParam from \"./InputParam/InputParam\";\r\n\r\nclass Params extends React.Component {\r\n\r\n    render() {\r\n\r\n        let startValue = this.props.startValue;\r\n        let maxValue = this.props.maxValue;\r\n        let wrongParams = this.props.wrongParams;\r\n\r\n        return (\r\n            <div className={`${this.props.propsClassName} ${classes.Params}`}>\r\n                <div className={classes.wrapInputParam}>\r\n                    <InputParam\r\n                        id={'maxValue'}\r\n                        labelValue={'max value:'}\r\n                        inputValue={maxValue}\r\n                        changeInputValue={this.props.changeInputValue}\r\n                        wrongParams={wrongParams}\r\n                    />\r\n                    <InputParam\r\n                        id={'startValue'}\r\n                        labelValue={'start value:'}\r\n                        inputValue={startValue}\r\n                        changeInputValue={this.props.changeInputValue}\r\n                        wrongParams={wrongParams}\r\n                    />\r\n                </div>\r\n                <div className={classes.wrapButton}>\r\n                    <Button\r\n                        name={'set'}\r\n                        backgroundColor={'#6fb3ff'}\r\n                        disabled={maxValue < 0 || startValue < 0 || wrongParams}\r\n                        active={'darkBlue'}\r\n                        onChangeValue={() => this.props.setValues(startValue, maxValue)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Params;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport classes from './ParamsCounter.module.scss';\nimport Counter from './Counter/Counter';\nimport Params from './Params/Params';\n\nclass ParamsCounter extends React.Component {\n\n    render() {\n        return (\n            <div className={classes.ParamsCounter}>\n                <Params\n                    propsClassName={classes.wrapContainer}\n                    startValue={this.props.state.startValue}\n                    maxValue={this.props.state.maxValue}\n                    wrongParams={this.props.state.wrongParams}\n                    changeInputValue={this.props.changeInputValue}\n                    setValues={this.props.setValues}\n                />\n                <Counter\n                    propsClassName={classes.wrapContainer}\n                    counter={this.props.state.counter}\n                    setStartValue={this.props.state.setStartValue}\n                    setMaxValue={this.props.state.setMaxValue}\n                    wrongParams={this.props.state.wrongParams}\n                    incCounter={this.props.incCounter}\n                    resetCounter={this.props.resetCounter}\n                    isDifferentParams={this.props.isDifferentParams}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ParamsCounter;\n","import React from 'react';\nimport './App.scss';\nimport ParamsCounter from \"./components/ParamsCounter/ParamsCounter\";\n\nclass App extends React.Component {\n\n    state = {\n        counter: 0,\n        startValue: 0,\n        maxValue: 0,\n        setStartValue: 0,\n        setMaxValue: 0,\n        wrongParams: false,\n    };\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('state', stateAsString);\n    };\n\n    restoreState = () => {\n        let state = this.state;\n        let stateAsString = localStorage.getItem('state');\n        if (stateAsString) {\n            state = JSON.parse(stateAsString);\n            this.setState(state)\n        }\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    incCounter = () => {\n        this.setState({counter: this.state.counter + 1})\n    };\n\n    resetCounter = () => {\n        this.setState({counter: this.state.setStartValue})\n    };\n\n    changeInputValue = (value, inputName) => {\n        this.setState({\n            [inputName]: value\n        }, () => {\n            this.isWrongParams(this.state.startValue, this.state.maxValue);\n            this.saveState()\n        });\n    };\n\n    isWrongParams = (startValue, maxValue) => {\n        +startValue >= +maxValue ||\n        +startValue < 0 ||\n        +maxValue < 0\n            ? this.setState({wrongParams: true}) : this.setState({wrongParams: false})\n    };\n\n    isDifferentParams = () => {\n        return +this.state.startValue !== +this.state.setStartValue || +this.state.maxValue !== +this.state.setMaxValue\n    };\n\n    setValues = (setStartValue, setMaxValue) => {\n        this.setState({\n            counter: setStartValue,\n            setStartValue,\n            setMaxValue\n        })\n    };\n\n    render() {\n        return (\n            <div className={'App'}>\n                <ParamsCounter\n                    state={this.state}\n                    incCounter={this.incCounter}\n                    resetCounter={this.resetCounter}\n                    changeInputValue={this.changeInputValue}\n                    setValues={this.setValues}\n                    isDifferentParams={this.isDifferentParams}\n                />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}